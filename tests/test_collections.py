import pytest
from collection_task_1 import task_1
from collection_task_2 import task2
from collection_task_3 import task_3

def get_full_mentors_list() -> list[list[str]]:
    return [
        ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев", "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина", "Азамат Искаков", "Роман Гордиенко"],
        ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев", "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев", "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
        ["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский", "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая", "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
        ["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин", "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин", "Михаил Ларченко"]
    ]
def get_half_mentors_list() -> list[list[str]]:
    return [
        ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев", "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина", "Азамат Искаков", "Роман Гордиенко"],
        ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев", "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев", "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"]
    ]
def quarter_mentors_list() -> list[list[str]]:
    return [
        ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев", "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина", "Азамат Искаков", "Роман Гордиенко"]
    ]

class TestTasks():
    
    @pytest.mark.parametrize(
        "mentors_list, expected",
        (
            [   
                get_full_mentors_list(),
                'Уникальные имена преподавателей: Адилет, Азамат, Александр, Алексей, Алена, Анатолий, Анна, Антон, Вадим, Валерий, Владимир, Денис, Дмитрий, Евгений, Елена, Иван, Илья, Кирилл, Константин, Максим, Михаил, Никита, Николай, Олег, Павел, Ринат, Роман, Сергей, Татьяна, Тимур, Филипп, Эдгар, Юрий'
            ],
            [
                get_half_mentors_list(),
                'Уникальные имена преподавателей: Азамат, Александр, Алексей, Анатолий, Анна, Антон, Вадим, Денис, Дмитрий, Евгений, Елена, Иван, Илья, Кирилл, Константин, Максим, Никита, Олег, Павел, Ринат, Роман, Сергей, Тимур, Филипп, Юрий'
            ],
            [
                quarter_mentors_list(),
                'Уникальные имена преподавателей: Азамат, Александр, Антон, Дмитрий, Евгений, Елена, Кирилл, Максим, Олег, Роман'
            ]
        )
    )
    def test_task_1(self, mentors_list, expected):
        result = task_1(mentors_list)
        assert expected == result

    @pytest.mark.parametrize(
        "mentors_list, expected",
        (
            [   
                get_full_mentors_list(),
                'Александр: 10 раз(а), Евгений: 5 раз(а), Максим: 4 раз(а)'
            ],
            [
                get_half_mentors_list(),
                'Максим: 3 раз(а), Александр: 3 раз(а), Сергей: 2 раз(а)'
            ],
            [
                quarter_mentors_list(),
                'Александр: 3 раз(а), Роман: 1 раз(а), Олег: 1 раз(а)'
            ]
        )
    )
    def test_task_2(self, mentors_list, expected):
        result = task2(mentors_list)
        assert expected == result
    
    def test_task_3(self):
        result = task_3(get_full_mentors_list())
        expected = 'Самый короткий курс(ы): Python-разработчик с нуля,\nСамый длинный курс(ы): Fullstack-разработчик на Python'
        assert expected == result

if __name__ == "__main__":
    test_collections = TestTasks()
    test_collections.test_task_1()
    test_collections.test_task_2()
    test_collections.test_task_3()